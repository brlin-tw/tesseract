Implement fallback config loading mechanism

This patch fixes configuration files in the readonly snap filesystem
not loadable by Tesseract due to missing datadir fallback logic.

If the config file with the same name doesn't appear in the
$SNAP_USER_COMMON directory, the one in the $SNAP/usr/local/share/tessdata
directory will be loaded, allow Tesseract to work properly.

Signed-off-by: 林博仁(Buo-ren Lin) <buo.ren.lin@gmail.com>

diff --git a/src/ccmain/tessedit.cpp b/src/ccmain/tessedit.cpp
index c7518883..b8a5cae6 100644
--- a/src/ccmain/tessedit.cpp
+++ b/src/ccmain/tessedit.cpp
@@ -37,6 +37,7 @@
 #  include "reject.h"
 #endif
 #include "lstmrecognizer.h"
+#include <cstdlib>
 
 namespace tesseract {
 
@@ -57,7 +58,28 @@ void Tesseract::read_config_file(const char *filename, SetParamConstraint constr
     if ((fp = fopen(path.c_str(), "rb")) != nullptr) {
       fclose(fp);
     } else {
-      path = filename;
+      const char *snap_env = getenv("SNAP");
+      if (snap_env != nullptr) {
+        std::string snap_prefix = snap_env;
+        std::string datadir_readonly = snap_prefix += "/usr/local/share/tessdata/";
+        path = datadir_readonly;
+        path += "configs/";
+        path += filename;
+        if ((fp = fopen(path.c_str(), "rb")) != nullptr) {
+          fclose(fp);
+        } else {
+          path = datadir_readonly;
+          path += "tessconfigs/";
+          path += filename;
+          if ((fp = fopen(path.c_str(), "rb")) != nullptr) {
+            fclose(fp);
+          } else {
+            path = filename;
+          }
+        }
+      } else {
+        path = filename;
+      }
     }
   }
   ParamUtils::ReadParamsFile(path.c_str(), constraint, this->params());
